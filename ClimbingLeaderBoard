import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Main {

    /*
     * Complete the 'climbingLeaderboard' function below.
     *
     * The function is expected to return an INTEGER_ARRAY.
     * The function accepts following parameters:
     *  1. INTEGER_ARRAY ranked
     *  2. INTEGER_ARRAY player
     */

    static int[] climbingLeaderboard(int[] normalPlayerScore, int[] alice){
        int x = normalPlayerScore.length;
        int y = alice.length;

        int[] result = new int[x];
        int[] ranks = new int[y];

        ranks[0]=1;

        for(int i = 0; i < x;i++){
            if(normalPlayerScore[i]==normalPlayerScore[i-1]){
                ranks[i]=ranks[i-1];
            }
            else {
                ranks[i]=ranks[i-1]+1;
            }
        }
        for(int i = 0; i < y;i++){
            int aliceScore = alice[i];
            if(aliceScore>normalPlayerScore[i]){
                result[i]=1;
            }
            else if(aliceScore<normalPlayerScore[i-1]){
                result[i]=ranks[x-1]+1;
            }
            else{
                int index = binarySearch(normalPlayerScore,aliceScore);
                result[i]=ranks[index];
            }
        }
        return result;
    }
    static int binarySearch(int[] a, int key){
        int start = 0;
        int end = a.length-1;
        while(start<=end){
            int mid = start +(start+end)/2;
            if(a[mid]==key){
                return mid;
            }
            else if(a[mid]<key&&key<a[mid-1]){
                return mid;
            }
            else if(a[mid]>key&&key>a[mid+1]){
                return mid+1;
            }
            else if(a[mid]>key){
                end = mid + 1;
            }
            else if(a[mid]<key){
                start = mid -1;
            }

        }
        return -1;
    }

    
    
}
